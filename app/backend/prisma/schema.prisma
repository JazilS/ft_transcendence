// This is your Prisma schema file,	friends:	friendsList[];

// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://jsabound:jsabound@postgres:5432/transcendance"
  // url      = env("DATABASE_URL") 
}

model User {
  id            String        @id @default(uuid())
  name          String?       @unique //@uniquechat
  avatar        String?
  chatRoomsIn   ChatroomUser[]
  bannedFromRooms    String[]
  roomOn        Chatroom?     @relation(fields: [roomOnId], references: [id])
  roomOnId      String?       @unique
  restricedInChatrooms ChatroomRestrictedUsers[]
  blockedUsers  String[]
  blockedByUsers  String[]
  messagesSend  Message[]

  email             String    @unique
  status            STATUS    @default(OFFLINE)
  twoFa             Boolean   @default(false)
  twoFaSecret       String?
  qrCheck           Boolean   @default(false)
  friends           User[]    @relation("Friends")
  friendsRelation   User[]    @relation("Friends")

  pong              Pong?     @relation("pong")
  profile                Profile?        @relation("userProfile")
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("userProfile", fields: [userId], references: [id], onDelete: Cascade)
  avatar    String?
  firstname String? @db.VarChar(25)
  lastname  String? @db.VarChar(25)
}

model Pong {
  user       User          @relation("pong", fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @unique @default(uuid())
  victory    Int           @default(0)
  losses     Int           @default(0)
  rating     Int           @default(0)
  winnedGame GameHistory[] @relation("winnedGame")
  loosedGame GameHistory[] @relation("loosedGame")
}

model GameHistory {
  id        String   @id @default(uuid())
  winner    Pong     @relation("winnedGame", fields: [winnerId], references: [userId])
  winnerId  String
  looser    Pong     @relation("loosedGame", fields: [looserId], references: [userId])
  looserId  String
  matchDate DateTime @default(now())

  @@unique([winnerId, looserId, matchDate])
}

model Message {
  id      String @id @default(uuid())
  content String
  chat    Chatroom @relation(fields: [chatId], references: [id])
  chatId  String
  emitter User @relation(fields: [emitterId], references: [id])
  emitterId String
}

model Chatroom {
  id              String    @id @default(uuid())
  name            String    @unique
  userOn          User?
  password        String?
  messages        Message[]
  users           ChatroomUser[]
  chatroomType    TYPE
  restrictedUsers ChatroomRestrictedUsers[]
}

model ChatroomUser {
  id       String @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  chatroom Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId String
  role      ROLE
  restriction RESTRICTION
}

model ChatroomRestrictedUsers {
  id        String @id @default(uuid())
  chatroom  Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId String
  user      User @relation(fields: [userId], references: [id])
  userId    String
  restriction RESTRICTION
  // restrictionTime DateTime
}

enum TYPE {
  DM
  PUBLIC
  PROTECTED
  PRIVATE
}

enum ROLE {
  CREATOR
  ADMIN
  MEMBER
}

enum RESTRICTION {
  NONE
  MUTED
  BANNED
  KICKED
}
enum STATUS {
  ONLINE
  OFFLINE
  PLAYING
}
