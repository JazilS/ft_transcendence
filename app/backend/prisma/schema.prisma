// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  avatar            String?
  status            STATUS    @default(OFFLINE)
  nickname          String?   @unique @db.VarChar(16)
  pong              Pong?     @relation("pong")
  profile                Profile?        @relation("userProfile")
  chatrooms Chatroom[]
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("userProfile", fields: [userId], references: [id], onDelete: Cascade)
  avatar    String?
  firstname String? @db.VarChar(25)
  lastname  String? @db.VarChar(25)
}

model Pong {
  user       User          @relation("pong", fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @unique @default(uuid())
  victory    Int           @default(0)
  losses     Int           @default(0)
  rating     Int           @default(0)
  winnedGame GameHistory[] @relation("winnedGame")
  loosedGame GameHistory[] @relation("loosedGame")
}

model GameHistory {
  id        String   @id @default(uuid())
  winner    Pong     @relation("winnedGame", fields: [winnerId], references: [userId])
  winnerId  String
  looser    Pong     @relation("loosedGame", fields: [looserId], references: [userId])
  looserId  String
  matchDate DateTime @default(now())

  @@unique([winnerId, looserId, matchDate])
}

model Message {
  id      String @id @default(uuid())
  content String
  chat    Chatroom @relation(fields: [chatId], references: [id])
  chatId  String
}

model Chatroom {
  id       String   @id @default(uuid())
  name     String
  messages Message[]
  users    User[]
  chatroomType     TYPE
}

enum TYPE {
  DM
  PUBLIC
  PROTECTED
  PRIVATE
}

enum STATUS {
  ONLINE
  OFFLINE
  PLAYING
}
